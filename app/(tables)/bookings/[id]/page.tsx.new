import { getBookingById } from "@/actions/booking-actions";
import { BookingProgressBar } from "@/components/formatters/BookingProgressBar";
import { Duration } from "@/components/formatters/Duration";
import { WhiteboardClass, extractStudents } from "@/backend/WhiteboardClass";
import { getBookingStatusColor } from "@/lib/constants";
import { cn } from "@/lib/utils";
import { 
  BookmarkIcon, 
  BookingIcon, 
  HeadsetIcon, 
  FlagIcon,
  HelmetIcon
} from "@/svgs";

interface BookingDetailPageProps {
  params: { id: string };
}

export default async function BookingDetailPage({ params }: BookingDetailPageProps) {
  const { id } = params;
  const { data: booking, error } = await getBookingById(id);

  if (error) {
    return <div className="text-red-500">Error: {error}</div>;
  }

  if (!booking) {
    return <div className="text-gray-500">Booking not found.</div>;
  }

  // Initialize the WhiteboardClass for booking calculations
  const bookingClass = new WhiteboardClass(booking);
  const students = extractStudents(booking);
  
  // Calculate package and pricing details
  const packageHours = booking.package ? booking.package.duration / 60 : 0;
  const totalPrice = booking.package
    ? booking.package.price_per_student * booking.package.capacity_students
    : 0;
  const pricePerHourPerStudent = packageHours > 0 
    ? (booking.package?.price_per_student || 0) / packageHours
    : 0;
  
  // Calculate event hours (used hours) from booking's lessons and events
  const eventHours = booking.lessons?.reduce((total, lesson) => {
    const lessonEventMinutes = lesson.events?.reduce((sum, event) => sum + (event.duration || 0), 0) || 0;
    return total + lessonEventMinutes / 60;
  }, 0) || 0;
  
  // Calculate price to pay per student based on used hours
  const priceToPay = pricePerHourPerStudent * eventHours;

  // Format date function for event dates
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const day = String(date.getUTCDate()).padStart(2, "0");
    const month = String(date.getUTCMonth() + 1).padStart(2, "0");
    return `${day}-${month}`;
  };

  return (
    <div className="container mx-auto p-4">
      <div className="grid gap-6 md:grid-cols-2">
        {/* Header Section */}
        <div className="col-span-full space-y-2">
          <div className="flex flex-wrap items-center justify-between gap-4">
            <h1 className="text-2xl font-bold">Booking Details</h1>
            <div className={cn(
              "px-3 py-1 rounded-full text-sm font-medium",
              getBookingStatusColor(booking.status)
            )}>
              {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
            </div>
          </div>
          
          {/* Progress bar */}
          <div className="w-full max-w-2xl mb-4">
            <div className="flex items-center gap-3 mb-1">
              <BookingIcon className="w-5 h-5 text-blue-500" />
              <span className="text-sm font-medium">
                {new Date(booking.date_start).toLocaleDateString()} to {new Date(booking.date_end).toLocaleDateString()}
              </span>
            </div>
            <BookingProgressBar
              eventMinutes={bookingClass.calculateBookingLessonEventMinutes()}
              totalMinutes={bookingClass.getTotalMinutes()}
            />
          </div>
        </div>

        {/* Left Column */}
        <div className="space-y-6">
          {/* Students Section */}
          <div className="bg-card rounded-lg border border-border p-4 space-y-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <span>Students</span>
              <span className="text-sm text-muted-foreground font-normal">({students.length})</span>
            </h2>
            <div className="space-y-3">
              {students.map((student) => (
                <div key={student.id} className="flex items-center gap-2">
                  <HelmetIcon className="w-5 h-5 text-yellow-500" />
                  <span className="font-medium">{student.name}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Package Details Section */}
          <div className="bg-card rounded-lg border border-border p-4 space-y-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <BookmarkIcon className="w-5 h-5 text-indigo-500" />
              <span>Package Details</span>
            </h2>
            
            {booking.package && (
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-muted-foreground">Description:</span>
                  <p className="font-medium">
                    {booking.package.description || "No description"}
                  </p>
                </div>
                <div>
                  <span className="text-muted-foreground">Reference:</span>
                  <p className="font-medium">
                    {booking.reference?.id || "NULL"}
                  </p>
                </div>
                <div>
                  <span className="text-muted-foreground">Duration:</span>
                  <p className="font-medium">
                    <Duration minutes={booking.package.duration} />
                  </p>
                </div>
                <div>
                  <span className="text-muted-foreground">Used Hours:</span>
                  <p className="font-medium">
                    <Duration minutes={eventHours * 60} />
                  </p>
                </div>
                <div>
                  <span className="text-muted-foreground">Kite Capacity:</span>
                  <p className="font-medium">
                    {booking.package.capacity_kites} kites / {booking.package.capacity_students} students
                  </p>
                </div>
                <div>
                  <span className="text-muted-foreground">
                    Price per Student:
                  </span>
                  <p className="font-medium">
                    €{booking.package.price_per_student}
                  </p>
                </div>
                <div>
                  <span className="text-muted-foreground">
                    Price per Hour/Student:
                  </span>
                  <p className="font-medium">
                    €{pricePerHourPerStudent.toFixed(2)}/h
                  </p>
                </div>
                <div className="col-span-2">
                  <span className="text-muted-foreground">Total Price:</span>
                  <p className="font-medium text-green-600">€{totalPrice}</p>
                </div>
                <div className="col-span-2">
                  <span className="text-muted-foreground">Price to Pay/Student:</span>
                  <p className="font-medium text-blue-600">€{priceToPay.toFixed(2)}</p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Right Column */}
        <div className="space-y-6">
          {/* Lessons Section */}
          <div className="bg-card rounded-lg border border-border p-4 space-y-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <HeadsetIcon className="w-5 h-5 text-green-600" />
              <span>Lessons</span>
              <span className="text-sm text-muted-foreground font-normal">({booking.lessons.length})</span>
            </h2>
            
            {booking.lessons.length > 0 ? (
              <div className="space-y-4">
                {booking.lessons.map((lesson) => (
                  <div key={lesson.id} className="bg-background/50 rounded p-3 space-y-3">
                    {/* Lesson header */}
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <HeadsetIcon className="w-4 h-4 text-green-600" />
                        <span className="font-medium">{lesson.teacher?.name || "Unknown Teacher"}</span>
                      </div>
                      <div className="text-sm px-2 py-0.5 bg-gray-100 dark:bg-gray-800 rounded">
                        {lesson.status}
                      </div>
                    </div>
                    
                    {/* Events list */}
                    {lesson.events && lesson.events.length > 0 && (
                      <div className="space-y-2">
                        <div className="text-sm font-medium text-muted-foreground">Events:</div>
                        <div className="ml-3 space-y-2">
                          {lesson.events.map((event) => (
                            <div
                              key={event.id}
                              className="flex items-center gap-3 text-sm"
                            >
                              <FlagIcon className="w-4 h-4 text-orange-500" />
                              <span>{formatDate(event.date)}</span>
                              <span className="text-muted-foreground">{event.location}</span>
                              <Duration minutes={event.duration || 0} />
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-muted-foreground">No lessons associated with this booking.</p>
            )}
          </div>
          
          {/* Reference Information */}
          {booking.reference && (
            <div className="bg-card rounded-lg border border-border p-4 space-y-4">
              <h2 className="text-xl font-semibold">Reference Information</h2>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-muted-foreground">Reference ID:</span>
                  <p className="font-medium">{booking.reference.id}</p>
                </div>
                {booking.reference.teacher && (
                  <div>
                    <span className="text-muted-foreground">Teacher:</span>
                    <p className="font-medium">
                      {booking.reference.teacher.name}
                    </p>
                  </div>
                )}
                {booking.reference.note && (
                  <div className="col-span-2">
                    <span className="text-muted-foreground">Note:</span>
                    <p className="font-medium">{booking.reference.note}</p>
                  </div>
                )}
              </div>
            </div>
          )}
          
          {/* Booking Dates */}
          <div className="bg-card rounded-lg border border-border p-4 space-y-4">
            <h2 className="text-xl font-semibold">Booking Dates</h2>
            <div className="grid grid-cols-1 gap-2 text-sm">
              <div className="flex justify-between">
                <span className="text-muted-foreground">Created:</span>
                <span className="font-medium">
                  {booking.created_at
                    ? new Date(booking.created_at).toLocaleDateString()
                    : "N/A"}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">Start Date:</span>
                <span className="font-medium">
                  {new Date(booking.date_start).toLocaleDateString()}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">End Date:</span>
                <span className="font-medium">
                  {new Date(booking.date_end).toLocaleDateString()}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
