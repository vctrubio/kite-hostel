
import { PackageStudent } from "@/drizzle/migrations/schema";
import { type InferSelectModel, type InferInsertModel } from "drizzle-orm";

// --- TYPE DEFINITIONS ---
// These types are generated by Drizzle based on your schema.
// They don't exist in the final JavaScript, but they enforce structure during development.

/**
 * Represents a full PackageStudent record READ from the database.
 * Note that it includes fields like `id` and `created_at`, which the database manages.
 */
type SelectPackage = InferSelectModel<typeof PackageStudent>;

/**
 * Represents the data needed to INSERT a new PackageStudent record.
 * Note that it EXCLUDES `id` and `created_at` because the database will generate them.
 * It also makes fields with defaults (like `capacity_kites`) optional.
 */
type InsertPackage = InferInsertModel<typeof PackageStudent>;


// --- EXAMPLE OBJECTS ---
// We create these objects to demonstrate the structure enforced by the types above.

const selectExample: SelectPackage = {
  id: "a8d7b6e5-f4c3-4b2a-9e1d-0f8c7b6a5d4e", // Must have an ID
  duration: 360,
  description: "A package selected from the DB",
  price_per_student: 150,
  capacity_students: 4,
  capacity_kites: 2,
  created_at: "2025-08-07T10:00:00.000Z", // Must have a created_at
};

const insertExample: InsertPackage = {
  duration: 180,
  description: "A new package to be inserted",
  price_per_student: 99,
  capacity_students: 2,
  // We can omit `capacity_kites` because it has a default value in the schema.
  // We MUST omit `id` and `created_at`.
};


/**
 * Represents our extended data model.
 * We use the TypeScript intersection operator (`&`) to combine
 * the base `SelectPackage` type with our custom `bookingCount` field.
 */
type PackageWithBookingCount = SelectPackage & {
  bookingCount: number;
};


// --- A NEW EXAMPLE OBJECT FOR OUR EXTENDED TYPE ---

const extendedExample: PackageWithBookingCount = {
  // We can spread the original example...
  ...selectExample,
  // ...and add our new, custom data.
  bookingCount: 42, 
};


export default function PlaygroundPage() {
  return (
    <div className="container mx-auto p-8 font-mono">
      <h1 className="text-3xl font-bold mb-6">Drizzle Type Inference</h1>
      
      <div className="mb-8 border-b pb-8">
        <h2 className="text-2xl font-semibold mb-2">`inferSelect`</h2>
        <p className="mb-2 text-gray-700">
          This is the type for an object that has been read from the database. It includes all fields, including database-generated ones.
        </p>
        <pre className="bg-gray-100 p-4 rounded-lg">
          <code>{JSON.stringify(selectExample, null, 2)}</code>
        </pre>
      </div>

      <div className="mb-8 border-b pb-8">
        <h2 className="text-2xl font-semibold mb-2">`inferInsert`</h2>
        <p className="mb-2 text-gray-700">
          This is the type for an object you are about to write to the database. You only provide the fields the database needs from you.
        </p>
        <pre className="bg-gray-100 p-4 rounded-lg">
          <code>{JSON.stringify(insertExample, null, 2)}</code>
        </pre>
      </div>

      <div className="mb-8 border-b pb-8">
        <h2 className="text-2xl font-semibold mb-2">Syntax Comparison</h2>
        <p className="mb-2 text-gray-700">
          Drizzle offers two ways to get the same type. The <code>.$inferSelect</code> syntax is newer and more concise.
        </p>
        <pre className="bg-blue-100 p-4 rounded-lg">
          <code>
{`// Syntax 1: Utility Type (Older)
import { type InferSelectModel } from "drizzle-orm";
type SelectPackage1 = InferSelectModel<typeof PackageStudent>;

// Syntax 2: Inferred Property (Newer & Recommended)
type SelectPackage2 = typeof PackageStudent.$inferSelect;

// Both produce the exact same type!`}
          </code>
        </pre>
      </div>

      <div>
        <h2 className="text-2xl font-semibold mb-2">Extending a Drizzle Type</h2>
        <p className="mb-2 text-gray-700">
          You can&apos;t change the Drizzle type, but you can create a new, extended type for your specific needs. Here, we add a `bookingCount`.
        </p>
        <pre className="bg-green-100 p-4 rounded-lg">
          <code>{JSON.stringify(extendedExample, null, 2)}</code>
        </pre>
      </div>
    </div>
  );
}
